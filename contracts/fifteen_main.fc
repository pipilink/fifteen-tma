#include "imports/utils.fc";

global slice owner;         ;; Owner address
global int profit;          ;; 0 - owner profit         
global int interest;        ;; 10 - current interest in %
global int deposit;         ;; 0   get contract balance - profit
global int fund;            ;; 55  TON => 55  | 27.5 | 13.75 | 6.875  
global int bid;             ;; 0.5 TON => 0.5 | 0.25 | 0.125 | 0.0625
global int bid_rate;        ;; 1 => 1/1, 1/2, 1/4, 1/8
global int stopped?;        ;; game over? when fund < 6.875 TON
global int warming?;        ;; warming mode?
global int last_time;       ;; minimum time result for get prize
global cell player_codes;   ;; player contract

;; top_board [1..10] sort struct -> 

() save_data() impure inline_ref {
    begin_cell()
        .store_slice(owner)
        .store_coins(profit)
        .store_int(interest,8)
        .store_coins(deposit)
        .store_coins(fund)
        .store_coins(bid)
        .store_int(bid_rate,8)
        .store_int(stopped?, 1)
        .store_int(warming?, 1)        
        .store_int(last_time, 16)        
        .store_ref(player_codes)
    .end_cell()
    .set_data();
}

() load_data() impure inline_ref {
    slice ds = get_data().begin_parse();
        owner = ds~load_msg_addr();
        profit = ds~load_coins();
        interest = ds~load_int(8);
        deposit = ds~load_coins();
        fund = ds~load_coins();
        bid = ds~load_coins();
        bid_rate = ds~load_int(8);
        stopped? = ds~load_int(1);
        warming? = ds~load_int(1);
        last_time = ds~load_int(16);
    ds.end_parse();
}

() on_bounce(slice src, slice s) impure inline {
    s~skip_bits(32);
    int op = s~load_uint(32);
    int query_id = s~load_uint(64);

    throw(0); ;; just accept bounced TON
}

() deposit_coins(slice src, slice s) impure inline {
    throw(0);
}

() send_withdraw(slice src, slice s) impure inline {
    throw(0);
}

() set_bid(slice src, slice s) impure inline {
    throw(0);
}


() route_internal_message(int flags, slice src, slice s) impure inline {
    if flags & 1 {
        return on_bounce(src, s);
    }

    int op = 0;
   
    if s.slice_bits() {
        op = s~load_uint(32);
    }

    if op == op::deposit_coins {
        ;; owner depo
        return deposit_coins(src, s);
    }

    if op == op::withdraw {
        ;; owner withdraw
        return send_withdraw(src, s);
    }

    if op == op::set_bid {
        ;; player set bid
        return set_bid(src, s);
    }

    throw(err::invalid_op);
}


() recv_internal(cell in_msg_full, slice s) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice src = cs~load_msg_addr();

    load_data();
    route_internal_message(flags, src, s);
    save_data();
}


int current_balance() method_id {
  [int balance, cell data] = get_balance();

    return balance;
}